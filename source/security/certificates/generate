#!/bin/bash

#-----------------------------------------------------------------------------------------------
# Create a new Public/Private key pair + Signed X.509 certificate for the Server and for Users
#
# These are used to authenticate the client with a server
#
# Inputs:     1 userid (nobody)
#        2 type of certificate: CLIENT or SERVER (CLIENT)
#        3 key length (2048 bits is default)
#        4 Duration of Certificate (31 days is default)
#        5 Directory of the CA root certificate and private key
#
# Defaults:     Directory of the openssl configuration files ./openssl.cnf
#        Directory where outputs are saved to ~/.UDA/
#
# Outputs:     x509.cert    signed certificate
#
# NOTE: the SERVER certificate must be generated before CLIENTs
#
#     TYPE=SERVER
#        serverX509.der    signed certificate in der format
#        serverskey.der    key pair (secret key) in der format
#        serverpkey.der    public key in der format
#
#     TYPE=CLIENT
#        clientX509.der    signed certificate in der format
#        clientskey.der    key pair (secret key) in der format
#        clientpkey.der    public key in der format
#        serverX509.der    copy of the server's signed certificate in der format
#        serverpkey.der    copy of the server's public key in der format
#
# Change History
#
# 14Dec2016 D.G.Muir    Original Version
#-----------------------------------------------------------------------------------------------

USER=${1:-nobody}
TYPE=${2:-CLIENT}    # SERVER is the only alternative

LENGTH=${3:-2048}
DAYS=${4:-31}

if [ ${TYPE} = SERVER ]; then
   LENGTH=4096
   DAYS=365
fi

# Create a secure work directory in the users home directory
# Change permisssions to owner read only

SERVER=$HOME/.UDA/server

if [ ${TYPE} = CLIENT ]; then
   WORK=$HOME/.UDA/client 
   mkdir -p $WORK >/dev/null 2>&1
   CONFIG=$PWD/client.cnf
else    
   mkdir -p $SERVER >/dev/null 2>&1
   WORK=$SERVER
   CONFIG=$PWD/server.cnf
fi

chmod 700 $WORK

# Cleanup existing keys and certificates

rm -f $WORK/*.pem
rm -f $WORK/*.der
rm -f $WORK/*.cert

# CA root directory

CADIR=${5:-$HOME/.UDA/caroot}

CAROOT=$CADIR/certs/carootX509.pem        # CA Root Certificate
CAKEY=$CADIR/private/carootskey.pem        # CA Key pair

# Create a new key pair
 
openssl genrsa -out $WORK/keys.pem $LENGTH -batch >/dev/null 2>&1

if [ $? != 0 ]; then   
   echo "Unable to Generate a new key pair!"
   exit 1  
fi  

# Create a x.509 certificate request

openssl req -new -inform PEM -config $CONFIG -key $WORK/keys.pem -x509 -out $WORK/req.pem -batch >/dev/null 2>&1

if [ $? != 0 ]; then   
   echo "Unable to Generate a new x509 certificate request!"
   exit 1  
fi
 
# Sign the certificate request using the CA root certificate and the CA's private key

openssl x509 -in $WORK/req.pem -CA $CAROOT -CAkey $CAKEY -CAcreateserial -days $DAYS \
-out $WORK/clientX509.pem >/dev/null 2>&1

rm -f $WORK/req.pem 

if [ $? != 0 ]; then   
   echo "Unable to Sign the new x509 certificate!"
   exit 1  
fi

# Convert certificate to DER format

openssl x509 -in $WORK/clientX509.pem -inform PEM -out $WORK/clientX509.der -outform DER 

if [ $? != 0 ]; then   
   echo "Unable to Convert Certificate to DER Format!"
   exit 1  
fi

# Convert keys to DER format

#openssl rsa -in $WORK/keys.pem -inform PEM -out $WORK/clientskey.der -outform DER >/dev/null 2>&1

#if [ $? != 0 ]; then   
#   echo "Unable to Convert Keys to DER Format!"
#   exit 1  
#fi

# public key

#openssl rsa -in $WORK/keys.pem -inform PEM -pubout -outform DER -out $WORK/clientpkey.der >/dev/null 2>&1

openssl rsa -in $WORK/keys.pem -inform PEM -pubout -out $WORK/clientpkey.pem >/dev/null 2>&1

# Move and rename the certificate and Public key

if [ ${TYPE} = SERVER ]; then
   mv $WORK/clientX509.der $WORK/serverX509.der
   mv $WORK/clientX509.pem $WORK/serverX509.pem  
   mv $WORK/keys.pem       $WORK/serverskey.pem 
   mv $WORK/clientpkey.pem $WORK/serverpkey.pem 
   
   cp -fpv $CADIR/certs/carootX509.der $WORK/.
   cp -fpv $CADIR/certs/carootpkey.pem $WORK/.
else
   cp -fpv $SERVER/serverX509.der $WORK/.
   cp -fpv $SERVER/serverpkey.pem $WORK/.
   mv -v $WORK/keys.pem   $WORK/clientskey.pem
fi

chmod 600 $WORK/*

ls -l $WORK

# Verify: Issuer and Subject should be the different 

if [ ${TYPE} = SERVER ]; then
   openssl x509 -noout -text -in $WORK/serverX509.pem  
else
   openssl x509 -noout -text -in $WORK/clientX509.pem 
fi


./properties ${TYPE}

exit 0
